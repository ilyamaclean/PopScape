// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// renumberPatchIds
IntegerMatrix renumberPatchIds(IntegerMatrix patchIds);
RcppExport SEXP _PopScape_renumberPatchIds(SEXP patchIdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type patchIds(patchIdsSEXP);
    rcpp_result_gen = Rcpp::wrap(renumberPatchIds(patchIds));
    return rcpp_result_gen;
END_RCPP
}
// patchdistcpp
NumericMatrix patchdistcpp(IntegerMatrix patches, NumericMatrix popden);
RcppExport SEXP _PopScape_patchdistcpp(SEXP patchesSEXP, SEXP popdenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type patches(patchesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type popden(popdenSEXP);
    rcpp_result_gen = Rcpp::wrap(patchdistcpp(patches, popden));
    return rcpp_result_gen;
END_RCPP
}
// calculateConnectivity
NumericVector calculateConnectivity(NumericVector Ai, NumericVector Oj, NumericMatrix dij, double alpha);
RcppExport SEXP _PopScape_calculateConnectivity(SEXP AiSEXP, SEXP OjSEXP, SEXP dijSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Ai(AiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Oj(OjSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dij(dijSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateConnectivity(Ai, Oj, dij, alpha));
    return rcpp_result_gen;
END_RCPP
}
// calculatePatchSizes
NumericVector calculatePatchSizes(IntegerMatrix patches);
RcppExport SEXP _PopScape_calculatePatchSizes(SEXP patchesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type patches(patchesSEXP);
    rcpp_result_gen = Rcpp::wrap(calculatePatchSizes(patches));
    return rcpp_result_gen;
END_RCPP
}
// calculateAveragePatchQuality
NumericVector calculateAveragePatchQuality(IntegerMatrix patches, NumericMatrix qualities);
RcppExport SEXP _PopScape_calculateAveragePatchQuality(SEXP patchesSEXP, SEXP qualitiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type patches(patchesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type qualities(qualitiesSEXP);
    rcpp_result_gen = Rcpp::wrap(calculateAveragePatchQuality(patches, qualities));
    return rcpp_result_gen;
END_RCPP
}
// ExtProb
NumericVector ExtProb(NumericVector Ai, NumericVector pden, double mu, double x);
RcppExport SEXP _PopScape_ExtProb(SEXP AiSEXP, SEXP pdenSEXP, SEXP muSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Ai(AiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type pden(pdenSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ExtProb(Ai, pden, mu, x));
    return rcpp_result_gen;
END_RCPP
}
// ColProb
NumericVector ColProb(NumericVector Ai, NumericVector Oj, NumericMatrix dij, double alpha, double gamma);
RcppExport SEXP _PopScape_ColProb(SEXP AiSEXP, SEXP OjSEXP, SEXP dijSEXP, SEXP alphaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type Ai(AiSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Oj(OjSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dij(dijSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(ColProb(Ai, Oj, dij, alpha, gamma));
    return rcpp_result_gen;
END_RCPP
}
// runmetapopmodel
NumericVector runmetapopmodel(IntegerMatrix patch, NumericMatrix popden, double res, NumericMatrix dij, double mu, double x, double alpha, double gamma, int timesteps);
RcppExport SEXP _PopScape_runmetapopmodel(SEXP patchSEXP, SEXP popdenSEXP, SEXP resSEXP, SEXP dijSEXP, SEXP muSEXP, SEXP xSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP timestepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type patch(patchSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type popden(popdenSEXP);
    Rcpp::traits::input_parameter< double >::type res(resSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dij(dijSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< int >::type timesteps(timestepsSEXP);
    rcpp_result_gen = Rcpp::wrap(runmetapopmodel(patch, popden, res, dij, mu, x, alpha, gamma, timesteps));
    return rcpp_result_gen;
END_RCPP
}
// assignPatchValues
NumericMatrix assignPatchValues(NumericMatrix patchIds, NumericVector values);
RcppExport SEXP _PopScape_assignPatchValues(SEXP patchIdsSEXP, SEXP valuesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type patchIds(patchIdsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type values(valuesSEXP);
    rcpp_result_gen = Rcpp::wrap(assignPatchValues(patchIds, values));
    return rcpp_result_gen;
END_RCPP
}
// PopSim_one
IntegerVector PopSim_one(IntegerVector Nt, IntegerVector K, NumericVector birthrate, NumericVector survival, NumericMatrix dij, double dispdist, double fracdisp, double emmsurv, NumericVector Areas);
RcppExport SEXP _PopScape_PopSim_one(SEXP NtSEXP, SEXP KSEXP, SEXP birthrateSEXP, SEXP survivalSEXP, SEXP dijSEXP, SEXP dispdistSEXP, SEXP fracdispSEXP, SEXP emmsurvSEXP, SEXP AreasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Nt(NtSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type birthrate(birthrateSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type survival(survivalSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dij(dijSEXP);
    Rcpp::traits::input_parameter< double >::type dispdist(dispdistSEXP);
    Rcpp::traits::input_parameter< double >::type fracdisp(fracdispSEXP);
    Rcpp::traits::input_parameter< double >::type emmsurv(emmsurvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Areas(AreasSEXP);
    rcpp_result_gen = Rcpp::wrap(PopSim_one(Nt, K, birthrate, survival, dij, dispdist, fracdisp, emmsurv, Areas));
    return rcpp_result_gen;
END_RCPP
}
// PopSim
IntegerMatrix PopSim(IntegerVector Nt, IntegerMatrix K, NumericMatrix birthrate, NumericMatrix survival, NumericMatrix dij, double dispdist, double fracdisp, double emmsurv, NumericVector Areas);
RcppExport SEXP _PopScape_PopSim(SEXP NtSEXP, SEXP KSEXP, SEXP birthrateSEXP, SEXP survivalSEXP, SEXP dijSEXP, SEXP dispdistSEXP, SEXP fracdispSEXP, SEXP emmsurvSEXP, SEXP AreasSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type Nt(NtSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type K(KSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type birthrate(birthrateSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type survival(survivalSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dij(dijSEXP);
    Rcpp::traits::input_parameter< double >::type dispdist(dispdistSEXP);
    Rcpp::traits::input_parameter< double >::type fracdisp(fracdispSEXP);
    Rcpp::traits::input_parameter< double >::type emmsurv(emmsurvSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Areas(AreasSEXP);
    rcpp_result_gen = Rcpp::wrap(PopSim(Nt, K, birthrate, survival, dij, dispdist, fracdisp, emmsurv, Areas));
    return rcpp_result_gen;
END_RCPP
}
// arraytomat
NumericMatrix arraytomat(NumericVector a, IntegerMatrix patchm);
RcppExport SEXP _PopScape_arraytomat(SEXP aSEXP, SEXP patchmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type patchm(patchmSEXP);
    rcpp_result_gen = Rcpp::wrap(arraytomat(a, patchm));
    return rcpp_result_gen;
END_RCPP
}
// apply3D
NumericMatrix apply3D(NumericVector a);
RcppExport SEXP _PopScape_apply3D(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(apply3D(a));
    return rcpp_result_gen;
END_RCPP
}
// mattoarray
IntegerVector mattoarray(IntegerMatrix m, IntegerMatrix patchm);
RcppExport SEXP _PopScape_mattoarray(SEXP mSEXP, SEXP patchmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< IntegerMatrix >::type patchm(patchmSEXP);
    rcpp_result_gen = Rcpp::wrap(mattoarray(m, patchm));
    return rcpp_result_gen;
END_RCPP
}
// apply3Dv
NumericVector apply3Dv(NumericVector a);
RcppExport SEXP _PopScape_apply3Dv(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(apply3Dv(a));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PopScape_renumberPatchIds", (DL_FUNC) &_PopScape_renumberPatchIds, 1},
    {"_PopScape_patchdistcpp", (DL_FUNC) &_PopScape_patchdistcpp, 2},
    {"_PopScape_calculateConnectivity", (DL_FUNC) &_PopScape_calculateConnectivity, 4},
    {"_PopScape_calculatePatchSizes", (DL_FUNC) &_PopScape_calculatePatchSizes, 1},
    {"_PopScape_calculateAveragePatchQuality", (DL_FUNC) &_PopScape_calculateAveragePatchQuality, 2},
    {"_PopScape_ExtProb", (DL_FUNC) &_PopScape_ExtProb, 4},
    {"_PopScape_ColProb", (DL_FUNC) &_PopScape_ColProb, 5},
    {"_PopScape_runmetapopmodel", (DL_FUNC) &_PopScape_runmetapopmodel, 9},
    {"_PopScape_assignPatchValues", (DL_FUNC) &_PopScape_assignPatchValues, 2},
    {"_PopScape_PopSim_one", (DL_FUNC) &_PopScape_PopSim_one, 9},
    {"_PopScape_PopSim", (DL_FUNC) &_PopScape_PopSim, 9},
    {"_PopScape_arraytomat", (DL_FUNC) &_PopScape_arraytomat, 2},
    {"_PopScape_apply3D", (DL_FUNC) &_PopScape_apply3D, 1},
    {"_PopScape_mattoarray", (DL_FUNC) &_PopScape_mattoarray, 2},
    {"_PopScape_apply3Dv", (DL_FUNC) &_PopScape_apply3Dv, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_PopScape(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
